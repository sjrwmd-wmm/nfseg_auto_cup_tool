# -*- coding: utf-8 -*-
"""
Created on Wed Feb 17 12:48:49 2021

@author: PBremner

Assemble and output fluxes at specified gages
Generate the dQ summary report
"""

# Import libraries
import os
import sys

sys.path.insert(0, os.path.join('src','utilities'))
import mydefinitions as mydef



# Quick function to return a dictionary list
# made up of the current lines contents
def line2dict_csv(stnline):
    stn = stnline.rstrip().split(',')
    return {'number':stn[0],'name':stn[1],'reach_type':stn[2], 'WMD':stn[3]}



class ContributingGages(object):
    """ Class for defining and working with relations between gaging stations
        and their upstream contributing gaging stations.
        
        20180725    original code   Trey Grubbs
        20210219    modifications   Paul Bremner
    """
    
    def __init__(self):
        self.sim_fluxes = {}

    def read_file_with_cup_id_and_amount(self, input_file_name):
        """ Parse a file containing the cup id number and withdrawal rate """
        with open(input_file_name, 'r') as f:
            line_list = f.readline().rstrip().split(',')
        self.cup_id, self.cup_withdrawal_mgd = tuple(line_list)
        self.cup_withdrawal_mgd = float(self.cup_withdrawal_mgd)
        self.cup_withdrawal_cfs = self.cup_withdrawal_mgd * mydef.ConvFactors().mgd2cfs

    def parse_station_numbers_and_names_file(self, input_file_name):
        """ Parse the station information file.
            Store the data in a list of dictionaries.
            Each dictionary element: {'stn_ID', 'station_name', 'reach_type', 'WMD'}
        """
        with open(input_file_name, 'r') as f: stns = f.readlines()
        self.station_list = [line2dict_csv(stnline) for stnline in stns]

    def parse_simualted_qr_file(self, input_file_name):
        """ Parse a file with simulated flux values for 'qr reaches'.
            NOTE: this type of file is typically generated by a program
                  like sim_q_reach_3d_auto.py.
        """
        with open(input_file_name, 'r') as f:
            
            # Use dictionary comprehension to create
            # a dictionary of the field_names (header line)
            # storing each field's index value
            field_names = f.readline().rstrip().split()
            field_indices = {fn : field_names.index(fn) for fn in field_names}
                
            for line in f.readlines():
                line_list = line.rstrip().split()
                
                # Ensure characters in the ID name are lowercase
                ds_station_number = line_list[field_indices['gaged_reach_id']].lower()
                
                total_flux_sp1 = float(line_list[field_indices['total_sim_flux_sp1_ts1']])
                total_flux_sp2 = float(line_list[field_indices['total_sim_flux_sp2_ts1']])
                delta_total_flux_sp2_minus_sp1 = float(line_list[field_indices['del_total_sim_flux']])
                
                # Add values to the sim_fluxes dictionary list
                # Each dictionary index is a tuple
                self.sim_fluxes[(ds_station_number, 'total_sim_flux_sp1', 'qr')] = total_flux_sp1
                self.sim_fluxes[(ds_station_number, 'total_sim_flux_sp2', 'qr')] = total_flux_sp2
                self.sim_fluxes[(ds_station_number, 'delta_total_flux_sp2_minus_sp1', 'qr')] = delta_total_flux_sp2_minus_sp1
        
        
    def parse_simualted_qs_file(self, input_file_name):
        """ Parse a file with simulated flux values for 'qs reaches', comprised
            of river reaches from a collection of subreaches (i.e. 'qr' reaches)
            NOTE: this type of file is typically generated by a program
                  like sum_sim_q_reach.py.
        """
        with open(input_file_name, 'r') as f:
            
            # Use dictionary comprehension to create
            # a dictionary of the field_names (header line)
            # storing each field's index value
            field_names = f.readline().strip().split(',')
            field_indices = {fn : field_names.index(fn) for fn in field_names}
                
            for line in f.readlines():
                line_list = line.rstrip().split(',')
                
                # Ensure characters in the ID name are lowercase
                ds_station_number = line_list[field_indices['station_id']].lower()
                
                total_flux_sp1 = float(line_list[field_indices['total_sim_flux_sp1']])
                total_flux_sp2 = float(line_list[field_indices['total_sim_flux_sp2']])
                delta_total_flux_sp2_minus_sp1 = float(line_list[field_indices['total_sim_flux_sp2_minus_sp1']])
                
                # Add values to the sim_fluxes dictionary list
                # Each dictionary index is a tuple
                self.sim_fluxes[(ds_station_number, 'total_sim_flux_sp1', 'qs')] = total_flux_sp1
                self.sim_fluxes[(ds_station_number, 'total_sim_flux_sp2', 'qs')] = total_flux_sp2
                self.sim_fluxes[(ds_station_number, 'delta_total_flux_sp2_minus_sp1', 'qs')] = delta_total_flux_sp2_minus_sp1
        
        
    def generate_station_flux_ouput(self):
        """ Generate cumulative simulated fluxes and simulated flux differences
            for each station listed in station_number_and_names_file_name
        """
        
        # Initialize an output string
        self.output_string = ""
        
        # Loop through all the stations
        for station in self.station_list:
            
            """ Assemble output strings for a given station number. """
            self.output_string += '{0},{1},{2},'.format(station['number'], station['name'], station['WMD'])
    
            flux_sp1 = self.sim_fluxes[(station['number'],'total_sim_flux_sp1', station['reach_type'])]
            flux_sp2 = self.sim_fluxes[(station['number'],'total_sim_flux_sp2', station['reach_type'])]
            #flux_change = self.sim_fluxes[(station['number'],'delta_total_flux_sp2_minus_sp1', reach_type)]
            
            flux_change = flux_sp2 - flux_sp1
            if abs(flux_sp1) > 1.e-10:
                flux_change_as_fraction_of_flow = flux_change/flux_sp1
            else:
                flux_change_as_fraction_of_flow = -1.2345e30
            
            flux_change_fraction_of_cup = flux_change / self.cup_withdrawal_cfs
            output_tuple_for_appending = (flux_sp1, flux_sp2, flux_change, flux_change_as_fraction_of_flow, flux_change_fraction_of_cup)
            output_list_for_joining = ['{0:0.6f}'.format(x) for x in output_tuple_for_appending]
            self.output_string += ( ','.join(output_list_for_joining)+'\n' )
        #
        

    def output_fluxes(self, output_summary_file_name):
        """ Create the output file """
        
        output_summary_file_header = ('station_number,' +
                                      'station_name,' +
                                      'WMD,' +
                                      'simulated_flux_base_condition_cfs,' +
                                      'simulated_flux_with_cup_cfs,' +
                                      'simulated_change_in_flow_cfs,' +
                                      'simulated_change_in_flow_as_fraction_of_flow,' +
                                      'simulated_change_in_flow_as_a_fraction_of_cup\n')
        
        with open(output_summary_file_name, 'w') as fout:
            # Write the header line
            fout.write(output_summary_file_header)
            
            # Write all the data lines at once
            fout.write(self.output_string)
        

def main(logfile,
         postproc_deffiles_dQ,
         cup_id_and_rate_file_name,
         qr_file_name,
         qs_file_name,
         output_summary_file_name
         ):
    """ Main program """
    #cup_id_and_rate_file_name = 'cup_id_and_rate.csv'
    station_number_and_names_file_name = os.path.join(postproc_deffiles_dQ,'station_number_and_names_20210218.csv')
    #qr_file_name = 'gaged_reach_fluxes.asc'
    #qs_file_name = 'gaged_fluxes_sum.csv'
    #output_summary_file_name = 'delta_q_summary.csv'
    
    a = ContributingGages()
    
    # Read the cup info
    a.read_file_with_cup_id_and_amount(cup_id_and_rate_file_name)
    
    # Read in the station info
    a.parse_station_numbers_and_names_file(station_number_and_names_file_name)
    
    # Get info from the gage fluxes
    a.parse_simualted_qr_file(qr_file_name)
    
    # Get info from the summed gage fluxes
    a.parse_simualted_qs_file(qs_file_name)
    
    # Generate the output of the fluxes
    a.generate_station_flux_ouput()
    
    # Output it all to file
    a.output_fluxes(output_summary_file_name)
    
    
    currentmessage = ('Done with delta_q_report!\n\n')
    print (currentmessage)
    with open(logfile,'a') as lf: lf.write(currentmessage)
#
#main('test_logfile.log',
#     os.getcwd(),
#     'cup_id_and_rate.csv',
#     'gaged_reach_fluxes.asc',
#     'gaged_fluxes_sum.csv',
#     'test_delta_q_summary.csv')