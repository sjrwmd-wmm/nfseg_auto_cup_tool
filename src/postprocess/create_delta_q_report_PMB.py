# -*- coding: utf-8 -*-
"""
Created on Wed Feb 17 12:48:49 2021

@author: PBremner
"""

# Import libraries
import os
import sys
from collections import OrderedDict
sys.path.insert(0,'src\utilities')
import basic_utilities as bscut
import mydefinitions as mydef


class ContributingGages(object):
    """ Class for defining and working with relations between gaging stations
        and their upstream contributing gaging stations.
        
        20180725    original code   Trey Grubbs
    """
    
    def __init__(self):
        self.sim_fluxes = {}

    def initialize_output_files(self, output_summary_file_name):
        """ Open output files. """
        #output_summary_file_name = 'delta_q_summary.csv'
        output_summary_file_header = ('station_number,' +
                                      'station_name,' +
                                      'simulated_flux_base_condition_cfs,' +
                                      'simulated_flux_with_cup_cfs,' +
                                      'simulated_change_in_flow_cfs,' +
                                      'simulated_change_in_flow_as_fraction_of_flow,' +
                                      'simulated_change_in_flow_as_a_fraction_of_cup\n')
        self.output_summary_file = open(output_summary_file_name, 'w')
        self.output_summary_file.write(output_summary_file_header)

    def read_file_with_cup_id_and_amount(self, input_file_name):
        """ Parse a file containing one record and two-fields:
                cup id number
                withdrawal rate, in 
            Store the data in instance variables.
        """
        f = open(input_file_name, 'r')
        line_list = f.readline().rstrip().split(',')
        self.cup_id, self.cup_withdrawal_mgd = tuple(line_list)
        self.cup_withdrawal_mgd = float(self.cup_withdrawal_mgd)
        self.cup_withdrawal_cfs = self.cup_withdrawal_mgd * mydef.ConvFactors().mgd2cfs

    def parse_station_numbers_and_names_file(self, input_file_name):
        """ Parse a file containing two-fields: station number and station name.
            Store the data in an ordered dictionary.
            Dictionary elements are organized as {'stn_ID': {'station_name','reach_type'} }
        """
        self.station_list = OrderedDict()
        with open(input_file_name, 'r') as f:
            for line in f.readlines():
                stn = line.rstrip().split(',')
                self.station_list[ stn[0] ] = {'station_name':stn[1],'reach_type':stn[2]}
            #
        #

    def parse_simualted_qr_file(self, input_file_name):
        """ Parse a file with simulated flux values for 'qr reaches'. Note that 
            this type of file is typically generated by a program like
            sim_q_reach_3d_auto.py.
        """
        field_indices = {}
        with open(input_file_name, 'r') as f:
            
            field_names = f.readline().rstrip().split()
            for field_name in field_names:
                index_value = field_names.index(field_name)
                field_indices[field_name] = index_value
                
            for line in f.readlines():
                line_list = line.rstrip().split()
                
                ds_station_number = line_list[field_indices['gaged_reach_id']].lower()
                
                total_flux_sp1 = float(line_list[field_indices['total_sim_flux_sp1_ts1']])
                total_flux_sp2 = float(line_list[field_indices['total_sim_flux_sp2_ts1']])
                delta_total_flux_sp2_minus_sp1 = float(line_list[field_indices['del_total_sim_flux']])
                
                self.sim_fluxes[(ds_station_number, 'total_sim_flux_sp1', 'qr')] = total_flux_sp1
                self.sim_fluxes[(ds_station_number, 'total_sim_flux_sp2', 'qr')] = total_flux_sp2
                self.sim_fluxes[(ds_station_number, 'delta_total_flux_sp2_minus_sp1', 'qr')] = delta_total_flux_sp2_minus_sp1
        
        
    def parse_simualted_qs_file(self, input_file_name):
        """ Parse a file with simulated flux values for 'qs reaches', which
            are river reaches that represent a collection of subreaches
            (i.e. 'qr' reaches). Note that 
            this type of file is typically generated by a program like
            sum_sim_q_reach.py.
        """
        field_indices = {}
        with open(input_file_name, 'r') as f:
            
            field_names = f.readline().strip().split(',')
            for field_name in field_names:
                index_value = field_names.index(field_name)
                field_indices[field_name] = index_value
                
            for line in f.readlines():
                line_list = line.rstrip().split(',')
                ds_station_number = line_list[field_indices['station_id']].lower()
                
                total_flux_sp1 = float(line_list[field_indices['total_sim_flux_sp1']])
                total_flux_sp2 = float(line_list[field_indices['total_sim_flux_sp2']])
                delta_total_flux_sp2_minus_sp1 = float(line_list[field_indices['total_sim_flux_sp2_minus_sp1']])
                
                self.sim_fluxes[(ds_station_number, 'total_sim_flux_sp1', 'qs')] = total_flux_sp1
                self.sim_fluxes[(ds_station_number, 'total_sim_flux_sp2', 'qs')] = total_flux_sp2
                self.sim_fluxes[(ds_station_number, 'delta_total_flux_sp2_minus_sp1', 'qs')] = delta_total_flux_sp2_minus_sp1
        
        
    def output_station_fluxes(self):
        """ Output cumulative simulated fluxes and simulated flux differences
            for each station listed in station_number_and_names_file_name
        """
        for station_number in self.station_list:
            
            """ Assemble output strings for a given station number. """
            station_name = self.station_list[station_number]['station_name']
            reach_type = self.station_list[station_number]['reach_type']
            output_string = '{0},{1},'.format(station_number, station_name)
    
            flux_sp1 = self.sim_fluxes[(station_number,'total_sim_flux_sp1', reach_type)]
            flux_sp2 = self.sim_fluxes[(station_number,'total_sim_flux_sp2', reach_type)]
            #flux_change = self.sim_fluxes[(station_number,'delta_total_flux_sp2_minus_sp1', reach_type)]
            
            flux_change = flux_sp2 - flux_sp1
            if abs(flux_sp1) > 1.e-10:
                flux_change_as_fraction_of_flow = flux_change/flux_sp1
            else:
                flux_change_as_fraction_of_flow = -1.2345e30
            
            flux_change_fraction_of_cup = flux_change/self.cup_withdrawal_cfs
            output_tuple_for_appending = (flux_sp1, flux_sp2, flux_change, flux_change_as_fraction_of_flow, flux_change_fraction_of_cup)
            output_list_for_joining = ['{0:0.6f}'.format(x) for x in output_tuple_for_appending]
            output_string_for_appending = ','.join(output_list_for_joining)
            output_string += (output_string_for_appending + '\n')
            
            self.output_summary_file.write(output_record_summary)
        #

    def close_output_files(self):
        """ Close the output files. """
        self.output_summary_file.close()


def main(logfile,
         postproc_deffiles_dQ,
         cup_id_and_rate_file_name,
         qr_file_name,
         qs_file_name,
         output_summary_file_name
         ):
    """ Main program. """
    #cup_id_and_rate_file_name = 'cup_id_and_rate.csv'
    station_number_and_names_file_name = os.path.join(postproc_deffiles_dQ,'station_number_and_names.csv')
    upstream_gage_numbers_file_name = os.path.join(postproc_deffiles_dQ,'upstream_gage_numbers.csv')
    #qr_file_name = 'gaged_reach_fluxes.asc'
    #qs_file_name = 'gaged_fluxes_sum.csv'
    #output_summary_file_name = 'delta_q_summary.csv'
    
    a = ContributingGages()
    
    # Read the cup info
    a.read_file_with_cup_id_and_amount(cup_id_and_rate_file_name)
    
    a.initialize_output_files(output_summary_file_name)
    
    # Read in the station info
    a.parse_station_numbers_and_names_file(station_number_and_names_file_name)
    
    # Get info from the gage fluxes
    a.parse_simualted_qr_file(qr_file_name)
    
    # Get info from the summed gage fluxes
    a.parse_simualted_qs_file(qs_file_name)
    
    # Output it all
    a.output_station_fluxes()
    a.close_output_files()
    
    currentmessage = ('Done with delta_q_report!\n\n')
    print (currentmessage)
    with open(logfile,'a') as lf: lf.write(currentmessage)
    
main('test_logfile.log',
     os.getcwd(),
     'cup_id_and_rate.csv',
     'gaged_reach_fluxes.asc',
     'gaged_fluxes_sum.csv',
     'test_delta_q_summary.csv')